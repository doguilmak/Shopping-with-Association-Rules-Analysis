# -*- coding: utf-8 -*-
"""AssociationRulesAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHTH7NqEaP-mPrsLU4OX12MGx0_ROCq1

<h1 align=center><font size = 5>Offer Food with Association Rules Analysis</font></h1>

<br>

<img src="https://images.unsplash.com/photo-1542838132-92c53300491e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80" height=480 width=950 alt="market">

<small>Picture Source: <a href="https://unsplash.com/photos/D6Tu_L3chLE">Unsplash</a></small>

<br>

<h2>Data Set Information:</h2>

<p>The dataset has no real-world equivalent. It is completely randomly generated. Therefore, it will be of great benefit to going through the real data set in order to make a real recommendation. If you have the appropriate data set, you can go over it (hope you show it to me).</p>

<br>

<h2>Keywords</h2> 

<ul>
	<li>Market</li>
	<li>Machine Learning</li>
	<li>Association Rules Analysis</li>
	<li>Apriori</li>
	<li>Association Rule Mining</li>
</ul> 

<br>

<h1>Objective for this Notebook</h1>

<p>In this project, a recommendation model was developed with <i>Association rule analysis</i> based on the products preferred by the customers.</p>

<div class="alert alert-block alert-info" style="margin-top: 20px">
<li><a href="https://#importing_libraries">Importing Libraries</a></li>
<li><a href="https://#data_preprocessing">Data Preprocessing</a></li>
<li><a href="https://#build_ara_model">Building Association Rules Analysis Model</a></li>
<br>

<p></p>
Estimated Time Needed: <strong>20 min</strong>
</div>

<a id="importing_libraries"></a>

<h2 align=center>Importing Libraries</h2>
"""

import pandas as pd
import numpy as np

"""<br>

<a id="data_preprocessing"></a>

<h2 align=center>Data Preprocessing</h2>
"""

df = pd.read_csv('pocket.csv')

df.head()

df.tail()

df.describe().T

df.info()

print("Number of NaN values: {}.".format(df.isnull().sum().sum()))

df.shape

"""<br>

<a id="build_ara_model"></a>

<h2 align=center>Building Association Rules Analysis Model</h2>
"""

from mlxtend.frequent_patterns import apriori
df1 = apriori(df, min_support=0.02, use_colnames = True)

print(df1)

from mlxtend.frequent_patterns import association_rules

rule = association_rules(df1, metric = "confidence", min_threshold = 0.2)

"""<p><code>Support</code>: Support is an indication of how frequently the itemset appears in the dataset.</p>

$$support = P(A \cap B) $$

<br>

<p><code>Confidence</code>: Confidence is the percentage of all transactions satisfying X that also satisfy Y.</p>

$$conf(X 	\Rightarrow Y) = P(Y | X) = \frac{supp(X \cap Y)}{supp(X)}$$

<br>

<p><code>Lift</code>: or the ratio of the observed support to that expected if X and Y were independent.</p>

$$lift(X 	\Rightarrow Y) = \frac{supp(X \cap Y)}{supp(X) \cdot supp(Y)}$$

<br>

<p><code>Conviction</code>: compares the probability that X appears without Y if they were dependent with the actual frequency of the appearance of X without Y.</p>

$$conv(X 	\Rightarrow Y) = \frac{1-supp(Y)}{1-conf(X \Rightarrow Y)}$$

<br>

Source: <a href='https://en.wikipedia.org/wiki/Association_rule_learning'>Wikipedia</a>
"""

rule[(rule['confidence'] >= 0.30) & (rule['support'] >= 0.1)]

rule["antecedents"] = rule["antecedents"].apply(lambda x: ', '.join(list(x))).astype("unicode")
rule["consequents"] = rule["consequents"].apply(lambda x: ', '.join(list(x))).astype("unicode")

rule

rule[(rule['antecedents'] == 'BREAD') & (rule['confidence'] >= 0.10) & (rule['support'] >= 0.001)]

rule[(rule['antecedents'] == 'WATER, CHOCOLATE') & (rule['confidence'] >= 0.10) & (rule['support'] >= 0.001)]

rule[(rule['antecedents'] == 'WATER, CHOCOLATE') & (rule['confidence'] >= 0.10) & (rule['support'] >= 0.001)]['consequents'][0:3].values

rule[(rule['antecedents'] == 'WATER, CHOCOLATE') & (rule['confidence'] >= 0.10) & (rule['support'] >= 0.001)]['support'][0:3].values

def suggest_item(rule, items, min_threshold=0.2, min_support=0.02, parameter='support', confidence_thold = 0.10, support_thold=0.001):
  from mlxtend.frequent_patterns import apriori
  import numpy as np
  import pandas as pd

  df1 = apriori(df, min_support=min_support, use_colnames = True)
  rule = association_rules(df1, metric = "confidence", min_threshold = min_threshold)
  
  rule["antecedents"] = rule["antecedents"].apply(lambda x: ', '.join(list(x))).astype("unicode")
  rule["consequents"] = rule["consequents"].apply(lambda x: ', '.join(list(x))).astype("unicode")
  
  suggestions = rule[(rule['antecedents'] == items) & \
                     (rule['confidence'] >= confidence_thold) & \
                     (rule['support'] >= support_thold)]['consequents'].values

  parameters = rule[(rule['antecedents'] == items) & \
                     (rule['confidence'] >= confidence_thold) & \
                     (rule['support'] >= support_thold)][parameter].values

  return suggestions, parameters

item = 'BREAD'
suggested_items, parameter = suggest_item(rule, item, parameter='confidence')
for i in range(len(suggested_items)):
  print(f'I recommend to buy you {suggested_items[i]} with {parameter[i]} value with {item}.')

list_zip = zip(suggested_items, parameter)
zipped_list = list(list_zip)
df2 = pd.DataFrame(zipped_list, columns = ['item','parameter'])
best_parameter = df2['parameter'].max()
best_suggestion = df2['item'][df2['parameter'].argmax()]
print(f'Best parameter: {best_parameter}')
print(f'Best suggestion: {best_suggestion}')

"""<br>

<h1>Contact Me</h1>
<p>If you have something to say to me please contact me:</p>

<ul>
  <li>Twitter: <a href="https://twitter.com/Doguilmak">Doguilmak</a></li>
  <li>Mail address: doguilmak@gmail.com</li>
</ul>
"""

from datetime import datetime
print(f"Changes have been made to the project on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")